spacePattern=3
lineThickness=2.5
name=lokito
vertexDiameter=40
shortPattern=1
nodeThickness=2.5
longPattern=3
===
init : active(2)
{
	{
		S:startsymbol(100,100)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
	}
}

ballFound : active(2)
{
	{
		loki:robot(100,100)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
}

ballLostWhileHappy : active(2)
{
	{
		loki:robot(100,100)
		status:status(100,250)
		ball:ball(300,100)
		loki->ball(sees)
		loki->status(happy)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
	}
}

ballLostWhileBored : active(2)
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		status:status(100,250)
		loki->ball(sees)
		loki->status(bored)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
	}
}

ballCentered : active(2)
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
		loki->ball(fixates)
	}
}

ballNotCentered : active(2)
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
		loki->ball(fixates)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
}

ballTouched : active(2)
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		status:status(100,250)
		loki->ball(fixates)
		loki->status(bored)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		status:status(100,250)
		loki->status(happy)
		loki->ball(fixates)
		loki->ball(touches)
	}
}

ballNotTouched : active(2)
{
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
		loki->ball(touches)
	}
	=>
	{
		loki:robot(100,100)
		ball:ball(300,100)
		loki->ball(sees)
	}
}

setRest : active(2)
{
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
		loki->status(rest)
	}
}

unsetRest : active(2)
{
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
		loki->status(rest)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
	}
}

gotBored : active(2)
{
	{
		loki:robot(100,100)
		status:status(100,250)
	}
	=>
	{
		loki:robot(100,100)
		status:status(100,250)
		loki->status(bored)
	}
}


spacePattern=3
lineThickness=2
fontName=Arial
name=game
vertexDiameter=40
shortPattern=1
nodeThickness=2
fontSize=14
longPattern=3
===
ballFound : active(2)
{
	{
		r:robot(100,90)
	}
	=>
	{
		r:robot(100,100)
		b:ball(300,100)
		r->b(sees)
	}
}

ballLostWhileHappy : passive(1)
{
	{
		r:robot(100,100)
		b:ball(300,100)
		s:status(100,250)
		r->b(sees)
		r->s(happy)
	}
	=>
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(bored)
	}
}

ballLostWhileBored : passive(1)
{
	{
		r:robot(100,100)
		b:ball(300,100)
		s:status(100,250)
		r->b(sees)
		r->s(bored)
	}
	=>
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(bored)
	}
}

ballCentered : active(1)
{
	{
		r:robot(100,100)
		b:ball(300,100)
		r->b(sees)
	}
	=>
	{
		r:robot(100,100)
		b:ball(300,100)
		r->b(sees)
		r->b(fixates)
	}
}

ballNotCentered : passive(1)
{
	{
		r:robot(100,100)
		b:ball(300,100)
		r->b(sees)
		r->b(fixates)
	}
	=>
	{
		r:robot(100,100)
		b:ball(300,100)
		r->b(sees)
	}
}

ballTouched : active(1)
{
	{
		r:robot(100,100)
		b:ball(300,100)
		s:status(100,250)
		r->b(fixates)
		r->s(bored)
	}
	=>
	{
		r:robot(100,100)
		b:ball(300,100)
		s:status(100,250)
		r->s(happy)
		r->b(fixates)
		r->b(touches)
	}
}

ballNotTouched : active(1)
{
	{
		r:robot(100,100)
		b:ball(300,100)
		r->b(sees)
		r->b(touches)
	}
	=>
	{
		r:robot(100,100)
		b:ball(300,100)
		r->b(sees)
	}
}

setRest : active(1)
{
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(bored)
	}
	=>
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(bored)
		r->s(rest)
	}
}

unsetRest : active(1)
{
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(bored)
		r->s(rest)
	}
	=>
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(bored)
	}
}

gotBored : passive(1)
{
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(happy)
	}
	=>
	{
		r:robot(100,100)
		s:status(100,250)
		r->s(bored)
	}
}

